/*
 * This code was generated by ojc.
 */
import GeneticAlgorithm.InstrumentCode.*;
import java.util.Random;


public class BinarySearch
{

    public BinarySearch()
    {
        trace.add( new java.lang.Integer( 1 ) );
    }

    public int search( int[] array, int key )
    {
        trace.add( new java.lang.Integer( 2 ) );
        int n = array.length;
        int low = 0;
        int high = n - 1;
        int mid = -1;
        while (low <= high) {
            trace.add( new java.lang.Integer( 3 ) );
            mid = (low + high) / 2;
            if (key < array[mid]) {
                trace.add( new java.lang.Integer( 4 ) );
                high = mid - 1;
            } else {
                trace.add( new java.lang.Integer( 5 ) );
                if (key > array[mid]) {
                    trace.add( new java.lang.Integer( 6 ) );
                    low = mid + 1;
                } else {
                    trace.add( new java.lang.Integer( 7 ) );
                    return mid;
                }
            }
        }
        return -1;
    }

    
    static java.util.Set trace = new java.util.HashSet();

    
    public static void newTrace()
    {
        trace = new java.util.HashSet();
    }

    
    public static java.util.Set getTrace()
    {
        return trace;
    }

}
