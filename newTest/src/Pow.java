/*
 * This code was generated by ojc.
 */
import GeneticAlgorithm.InstrumentCode.*;
import java.util.*;


public class Pow
{

    public Pow()
    {
        super();
        trace.add( new java.lang.Integer( 1 ) );
    }

    public void pow( int x, int y )
    {
        trace.add( new java.lang.Integer( 2 ) );
        float z;
        int p;
        if (y < 0) {
            trace.add( new java.lang.Integer( 3 ) );
            p = 0 - y;
        } else {
            trace.add( new java.lang.Integer( 4 ) );
            p = y;
        }
        z = 1.0f;
        while (p != 0) {
            trace.add( new java.lang.Integer( 5 ) );
            z = z * x;
            p = p - 1;
        }
        if (y < 0) {
            trace.add( new java.lang.Integer( 6 ) );
            z = 1.0f / z;
            System.out.println( z );
        } else {
            trace.add( new java.lang.Integer( 7 ) );
        }
    }

    
    static java.util.Set trace = new java.util.HashSet();

    
    public static void newTrace()
    {
        trace = new java.util.HashSet();
    }

    
    public static java.util.Set getTrace()
    {
        return trace;
    }

}
